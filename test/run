#!/bin/bash
#
# Test the MongoDB image.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

set -exo nounset
shopt -s nullglob

. test/common-lib
. test/lib

TEST_LIST="\
ctest_container_creation
ctest_configuration
ctest_general
ctest_change_password
ctest_mount_config
ctest_doc_content
ctest_WT_cache
ctest_local_replication
ctest_s2i"

test $# -eq 1 -a "${1-}" == --list && exit 0
test -n "${IMAGE_NAME-}" || false 'make sure $IMAGE_NAME is defined'

CID_FILE_DIR=$(mktemp --suffix=mongodb_test_cidfiles -d)

# enable cleanup
ct_enable_cleanup

TEST_DIR="$(readlink -zf $(dirname "${BASH_SOURCE[0]}"))"
S2I_ARGS="--force-pull=false "

function test_mongo() {
    echo "  Testing MongoDB"
    if [ -v ADMIN_PASS ]; then
        echo "  Testing Admin user privileges"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.dropUser('${USER}');"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.createUser({user:'${USER}',pwd:'${PASS}',roles:['readWrite','userAdmin','dbAdmin']});"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.testData.insert({x:0});"
        mongo_cmd "db.createUser({user:'test_user2',pwd:'test_password2',roles:['readWrite']});"
    fi
    echo "  Testing user privileges"
    mongo_cmd "db.testData.insert({ y : 1 });"
    mongo_cmd "db.testData.insert({ z : 2 });"
    mongo_cmd "db.testData.find().forEach(printjson);"
    mongo_cmd "db.testData.count();"
    mongo_cmd "db.testData.drop();"
    mongo_cmd "db.dropDatabase();"
    echo "  Success!"
}

function ctest_configuration() {
    echo "  Testing image configuration settings"
    test_config_option MONGODB_QUIET true "quiet: true"
    echo "  Success!"
}

function ctest_mount_config() {
    local name="mount_config"
    echo "  Testing config file mount"
    local database='db'
    local user='user'
    local password='password'
    local admin_password='adminPassword'

    local volume_dir
    volume_dir=`mktemp -d --tmpdir mongodb-testdata.XXXXX`
    chmod a+rwx ${volume_dir}
    config_file=$volume_dir/mongod.conf
    echo "dbpath=/var/lib/mongodb/dbpath
unixSocketPrefix = /var/lib/mongodb" > $config_file
    chmod a+wr ${config_file}

    CONTAINER_ARGS="
-e MONGODB_DATABASE=${database}
-e MONGODB_USER=${user}
-e MONGODB_PASSWORD=${password}
-e MONGODB_ADMIN_PASSWORD=${admin_password}
-v ${config_file}:/etc/mongod.conf:Z
-v ${volume_dir}:/var/lib/mongodb/dbpath:Z
"
    ct_create_container $name

    # need to set these because `mongo_cmd` relies on global variables
    USER=${user}
    PASS=${password}
    DB=${database}

    # need this to wait for the container to start up
    CONTAINER_IP=$(ct_get_cip ${name})
    echo "  Testing mongod is running"
    test_connection ${name}
    echo "  Testing config file works"
    docker exec $(ct_get_cid ${name}) bash -c "test -S /var/lib/mongodb/mongodb-27017.sock"

    # need to remove volume_dir with sudo because of permissions of files written
    # by the Docker container
    sudo rm -rf ${volume_dir}

    echo "  Success!"
}

function ctest_s2i() {
    echo "  Testing s2i usage"
    s2i usage ${S2I_ARGS} ${IMAGE_NAME} &>/dev/null

    # Set configuration file (differs for mmapv1 storage engine)
    mv ${TEST_DIR}/test-image/mongodb-cfg/mongod.conf ${TEST_DIR}/test-image/mongodb-cfg/mongod.conf.backup
    ln -s mongod-WT.conf ${TEST_DIR}/test-image/mongodb-cfg/mongod.conf

    echo "  Testing s2i build"
    s2i build file://${TEST_DIR}/test-image/ ${IMAGE_NAME} ${IMAGE_NAME}-testapp

    local container_name=s2i_config_build
    IMAGE_NAME=${IMAGE_NAME}-testapp _s2i_test_image "s2i_config_build" ""

    echo "  Testing s2i mount"
    test_app_dir=$(mktemp -d)
    cp -r ${TEST_DIR}/test-image/ ${test_app_dir}/
    chmod -R a+rX ${test_app_dir}
    _s2i_test_image "s2i_test_mount" "-v ${test_app_dir}/test-image:/opt/app-root/src/:z"
    rm -rf ${test_app_dir}
    mv ${TEST_DIR}/test-image/mongodb-cfg/mongod.conf.backup ${TEST_DIR}/test-image/mongodb-cfg/mongod.conf
    echo "  Success!"
}

# Run the chosen tests
TEST_LIST=${@:-$TEST_LIST} ct_run_test_list
