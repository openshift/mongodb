#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

source ${CONTAINER_SCRIPTS_PATH}/common.sh

export MONGODB_CONFIG_PATH=/etc/mongod.conf

# Data directory where MongoDB database files live. The data subdirectory is here
# because mongodb.conf lives in /var/lib/mongodb/ and we don't want a volume to
# override it.
export MONGODB_DATADIR=$(get_option "dbpath" ${MONGODB_CONFIG_PATH})
export MONGODB_PID_FILE=$(get_option "pidfilepath" ${MONGODB_CONFIG_PATH})
export CONTAINER_PORT=$(get_port ${MONGODB_CONFIG_PATH})

# Configuration settings.
# Update config file
[[ -n "${MONGODB_NOPREALLOC:-}" ]] && update_option noprealloc ${MONGODB_NOPREALLOC} ${MONGODB_CONFIG_PATH}
[[ -n "${MONGODB_SMALLFILES:-}" ]] && update_option smallfiles ${MONGODB_SMALLFILES} ${MONGODB_CONFIG_PATH}
[[ -n "${MONGODB_QUIET:-}" ]] && update_option quiet ${MONGODB_QUIET} ${MONGODB_CONFIG_PATH}

export MONGODB_KEYFILE_SOURCE_PATH="/var/run/secrets/mongo/keyfile"
export MONGODB_KEYFILE_PATH=/var/lib/mongodb/keyfile

function usage() {
  echo "You must specify the following environment variables:"
  echo "  MONGODB_USER"
  echo "  MONGODB_PASSWORD"
  echo "  MONGODB_DATABASE"
  echo "  MONGODB_ADMIN_PASSWORD"
  echo "Optional variables:"
  echo "  MONGODB_REPLICA_NAME"
  echo "  MONGODB_INITIAL_REPLICA_COUNT"
  echo "MongoDB settings:"
  echo "  MONGODB_NOPREALLOC (default: true)"
  echo "  MONGODB_SMALLFILES (default: true)"
  echo "  MONGODB_QUIET (default: true)"
  exit 1
}

# Make sure env variables don't propagate to mongod process.
function unset_env_vars() {
  unset MONGODB_USER MONGODB_PASSWORD MONGODB_DATABASE MONGODB_ADMIN_PASSWORD
}

function cleanup() {
  if [ -n "${MONGODB_REPLICA_NAME-}" ]; then
    mongo_remove
  fi
  echo "=> Shutting down MongoDB server ..."
  if pgrep mongod; then
    pkill -2 mongod
  fi
  wait_for_mongo_down
  exit 0
}

if [ $# -gt 0 ] && [ "$1" == "initiate" ]; then
  if ! [[ -v MONGODB_USER && -v MONGODB_PASSWORD && -v MONGODB_DATABASE && -v MONGODB_ADMIN_PASSWORD ]]; then
    usage
  fi
  setup_keyfile
  exec ${CONTAINER_SCRIPTS_PATH}/initiate_replica.sh
fi

# Need to cache the container address for the cleanup
cache_container_addr
mongo_common_args="-f $MONGODB_CONFIG_PATH --oplogSize 64"
if [ -z "${MONGODB_REPLICA_NAME-}" ]; then
  if ! [[ -v MONGODB_USER && -v MONGODB_PASSWORD && -v MONGODB_DATABASE && -v MONGODB_ADMIN_PASSWORD ]]; then
    usage
  fi
  # Run the MongoDB in 'standalone' mode
  mongod $mongo_common_args &
  wait_for_mongo_up
  js_command="db.system.users.count({'user':'admin', 'db':'admin'})"
  if [ "$(mongo admin --quiet --eval "$js_command")" == "1" ]; then
    echo "=> Admin user is already created. Resetting password ..."
    mongo_reset_admin
  else
    mongo_create_admin
  fi
  js_command="db.system.users.count({'user':'${MONGODB_USER}', 'db':'${MONGODB_DATABASE}'})"
  if [ "$(mongo admin --quiet --eval "$js_command")" == "1" ]; then
    echo "=> MONGODB_USER user is already created. Resetting password ..."
    mongo_reset_user
  else
    mongo_create_user
  fi
  # Restart the MongoDB daemon to bind on all interfaces
  mongod $mongo_common_args --shutdown
  wait_for_mongo_down
  unset_env_vars
  exec mongod $mongo_common_args --auth
else
  setup_keyfile
  # Run the MongoDB in 'clustered' mode with --replSet
  if [ ! -v MONGODB_NO_SUPERVISOR ]; then
    run_mongod_supervisor
    trap 'cleanup' SIGINT SIGTERM
  fi
  # Run `unset_env_vars` and `mongod` in a subshell because
  # MONGODB_ADMIN_PASSWORD should still be defined when the trapped call to
  # `cleanup` references it.
  (
    unset_env_vars
    mongod $mongo_common_args --replSet "${MONGODB_REPLICA_NAME}" \
      --keyFile "${MONGODB_KEYFILE_PATH}"
  ) &
  wait
fi
