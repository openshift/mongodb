#!/bin/bash
#
# Test the MongoDB image.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

set -exo nounset
shopt -s nullglob

IMAGE_NAME=${IMAGE_NAME-rhscl/mongodb-26-centos7-candidate}

CIDFILE_DIR=$(mktemp --suffix=mongodb_test_cidfiles -d)

function cleanup() {
    for cidfile in $CIDFILE_DIR/* ; do
        CONTAINER=$(cat $cidfile)

        echo "Stopping and removing container $CONTAINER..."
        docker stop $CONTAINER
        docker rm $CONTAINER
        rm $cidfile
        echo "Done."
    done
    rmdir $CIDFILE_DIR
}
trap cleanup EXIT SIGINT

function get_cid() {
    local id="$1" ; shift || return 1
    echo -n $(cat "$CIDFILE_DIR/$id")
}

function get_container_ip() {
    local id="$1" ; shift
    docker inspect --format='{{.NetworkSettings.IPAddress}}' $(get_cid "$id")
}

function mongo_cmd() {
    docker run --rm $IMAGE_NAME mongo "$DB" --host $CONTAINER_IP -u "$USER" -p "$PASS" --eval "${@}"
}

function mongo_admin_cmd() {
    docker run --rm $IMAGE_NAME mongo admin --host $CONTAINER_IP -u admin -p "$ADMIN_PASS" --eval "${@}"
}

function mongo_cmd_local() {
    local name="$1" ; shift
    docker exec -i $(get_cid $name) bash -c mongo "$@"
}

function test_connection() {
    local name=$1 ; shift
    ip=$(get_container_ip $name)
    echo "  Testing MongoDB connection to $ip..."
    local max_attempts=20
    local sleep_time=2
    for i in $(seq $max_attempts); do
        echo "    Trying to connect..."
        set +e
        mongo_cmd "db.getSiblingDB('test_database');"
        status=$?
        set -e
        if [ $status -eq 0 ]; then
            echo "  Success!"
            return 0
        fi
        sleep $sleep_time
    done
    echo "  Giving up: Failed to connect. Logs:"
    docker logs $(get_cid $name)
    return 1
}

test_scl_usage() {
    local name="$1"
    local run_cmd="$2"
    local expected="$3"

    echo "  Testing the image SCL enable"
    out=$(docker run --rm ${IMAGE_NAME} /bin/bash -c "${run_cmd}")
    if ! echo "${out}" | grep -q "${expected}"; then
        echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
        return 1
    fi
    #out=$(docker run --rm -i ${IMAGE_NAME} /bin/bash -i <<< "${run_cmd}")
    # if ! echo "${out}" | grep -q "${expected}"; then
    #     echo "ERROR[-i /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    #     return 1
    # fi
    # out=$(docker run --rm -i ${IMAGE_NAME} /bin/bash -l <<< "${run_cmd}")
    # if ! echo "${out}" | grep -q "${expected}"; then
    #     echo "ERROR[-i /bin/bash -l "${run_cmd}"] Expected '${expected}', got '${out}'"
    #     return 1
    # fi
    # out=$(docker run --rm -i ${IMAGE_NAME} /bin/sh -ic "${run_cmd}")
    # if ! echo "${out}" | grep -q "${expected}"; then
    #     echo "ERROR[/bin/sh -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    #     return 1
    # fi
    out=$(docker exec $(get_cid $name) /bin/bash -c "${run_cmd}" 2>&1)
    if ! echo "${out}" | grep -q "${expected}"; then
        echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
        return 1
    fi
    out=$(docker exec $(get_cid $name) /bin/sh -ic "${run_cmd}" 2>&1)
    if ! echo "${out}" | grep -q "${expected}"; then
        echo "ERROR[exec /bin/sh -ic "${run_cmd}"] Expected '${expected}', got '${out}'"
        return 1
    fi
}

function test_mongo() {
    echo "  Testing MongoDB"
    if [ -v ADMIN_PASS ]; then
        echo "  Testing Admin user privileges"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.removeUser('${USER}');"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.addUser({user:'${USER}',pwd:'${PASS}',roles:['readWrite','userAdmin','dbAdmin']});"
        mongo_admin_cmd "db=db.getSiblingDB('${DB}');db.testData.insert({x:0});"
        mongo_cmd "db.addUser({user:'test_user2',pwd:'test_password2',roles:['readWrite']});"
    fi
    echo "  Testing user privileges"
    mongo_cmd "db.testData.insert({ y : 1 });"
    mongo_cmd "db.testData.insert({ z : 2 });"
    mongo_cmd "db.testData.find().forEach(printjson);"
    mongo_cmd "db.testData.count();"
    mongo_cmd "db.testData.drop();"
    mongo_cmd "db.dropDatabase();"
    echo "  Success!"
}

function test_config_option() {
    local env_var=$1 ; shift
    local setting=$1 ; shift
    local value=$1 ; shift

    # If $value is a string, it needs to be in simple quotes ''.
    # If nothing is found, grep returns 1 and test fails.
    docker run --rm -e $env_var=${value//\'/} $IMAGE_NAME cat /etc/mongod.conf | grep -q "$setting = $value"
}

function run_configuration_tests() {
    echo "  Testing image configuration settings"
    test_config_option MONGODB_NOPREALLOC noprealloc true
    test_config_option MONGODB_SMALLFILES smallfiles true
    test_config_option MONGODB_QUIET quiet true
    echo "  Success!"
}

function create_container() {
    local name=$1 ; shift
    local cargs=${CONTAINER_ARGS:-}
    cidfile="$CIDFILE_DIR/$name"
    # create container with a cidfile in a directory for cleanup
    docker run --cidfile $cidfile -d $cargs "$@" $IMAGE_NAME
    echo "Created container $(cat $cidfile)"
}

function run_tests() {
    local name=$1 ; shift
    envs="-e MONGODB_USER=$USER -e MONGODB_PASSWORD=$PASS -e MONGODB_DATABASE=$DB"
    if [ -v ADMIN_PASS ]; then
        envs="$envs -e MONGODB_ADMIN_PASSWORD=$ADMIN_PASS"
    fi
    create_container $name $envs
    CONTAINER_IP=$(get_container_ip $name)
    test_connection $name
    echo "  Testing scl usage"
    test_scl_usage $name 'mongo --version' '2.6'
    test_mongo $name
    mongo_cmd_local $name <<< ""
}

# Tests.
run_configuration_tests
USER="user1" PASS="pass1" DB="test_db" ADMIN_PASS="r00t" run_tests admin
# Test with random uid in container
CONTAINER_ARGS="-u 12345" USER="user1" PASS="pass1" DB="test_db" ADMIN_PASS="r00t" run_tests admin_altuid
